package com.wow.dev.model;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.Calendar;
import java.util.Map;
import java.util.Set;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.TabSettings;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfWriter;
import com.wow.dev.controller.IICSMCValidation;
import com.wow.dev.mc.Aggregator;
import com.wow.dev.mc.Expression;
import com.wow.dev.mc.Joiner;
import com.wow.dev.mc.Lookup;
import com.wow.dev.mc.Mapping;
import com.wow.dev.mc.MappingConfig;
import com.wow.dev.mc.Router;
import com.wow.dev.mc.Sorter;
import com.wow.dev.mc.Source;
import com.wow.dev.mc.Target;
import com.wow.dev.mc.Transformation;

public class MCPDFResult {
	
	private Document pdfDoc;
	private Paragraph paragraph;
	private Font font; 
//	private PdfWriter pdfWriter;
	
	public MCPDFResult() {
		try {
			paragraph=new Paragraph();
			font = new Font();
			font.setFamily(BaseFont.COURIER);
			font.setSize(10);
			paragraph.setFont(font);
			paragraph.setSpacingAfter(4f);
			Rectangle pagesize = new Rectangle(714, 864);
			pdfDoc= new Document(pagesize);
			
		}catch(Exception e) {log_msg(e.getMessage());}
	}
	
	
	public void generateOutput(IICSMCValidation mcValidation,Map<Object, Object> validationList,String peerReviewerName) {
		
		MappingConfig mappingConfig=mcValidation.getMappingConfig();
		Mapping mapping=mcValidation.getMapping();
		
		try {
				PdfWriter.getInstance(pdfDoc, new FileOutputStream(mappingConfig.getMcName()+".pdf"));
				openDocument();
		} catch (FileNotFoundException e) {
			System.out.println("The process cannot access the file because it is being used by another process"+ mappingConfig.getMcName()+".pdf. Please close the file before running the process.");
			System.exit(-1);
		} catch (DocumentException e) {
			e.printStackTrace();
		}
		
		try {
			Image logo = Image.getInstance("res/logo.jpg");
			logo.scalePercent(45f);
			pdfDoc.add(logo);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		float TAB_SPLIT=290;
		log_msg("");
		
		setFontAttribute(font, 18, BaseColor.BLACK, paragraph, Element.ALIGN_CENTER, Font.BOLD);
		log_msg("-------------------------------------------------");
		log_msg("IICS MC Code Review – ICC Standards check Report");
		log_msg("-------------------------------------------------");
		setFontAttribute(font, 12, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.NORMAL);
		
		log_msg("\n");
		log_msg("MC Name",":   "+mappingConfig.getMcName(),TAB_SPLIT);
		log_msg("Folder Name",":   "+mcValidation.getFolderName(),TAB_SPLIT);
		log_msg("Generated By",":   "+peerReviewerName,TAB_SPLIT);
		log_msg("Generated On",":   "+Calendar.getInstance().getTime().toString(),TAB_SPLIT);
		
		String environment=null;
		if(mappingConfig.getRunTimeEnvironment().contains("9eklzvgzgy6fr8BTGOgwyu")) environment="DVLP";
		else if(mappingConfig.getRunTimeEnvironment().contains("7uTlT0vDF5IcOu3f2EaSAB")) environment="TEST";
		else if(mappingConfig.getRunTimeEnvironment().contains("1vGX61m1RwEdUNXIAE1FCk")) environment="ACPT";
		else if(mappingConfig.getRunTimeEnvironment().contains("02F8R05wmfvlTQju04uPCV")) environment="PROD";
		else environment="DEFAULT";
		log_msg("Environment",":   "+environment,TAB_SPLIT);
		log_msg("\n");
		
		
		
		log_msg("");
		setFontAttribute(font, 14, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.BOLD);
		log_msg("Objects validated");
		log_msg("-----------------");
		setFontAttribute(font, 12, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.NORMAL);
		log_msg("");
		log_msg("Mapping Configuration",":   "+mappingConfig.getMcName(),TAB_SPLIT);
		log_msg("Mapping",":   "+mapping.getMappingName(),TAB_SPLIT);
		log_msg("\n");
		
		log_msg("");
		setFontAttribute(font, 14, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.BOLD);
		log_msg("Code Compliance Checklist and Status");
		log_msg("------------------------------------");
		setFontAttribute(font, 12, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.NORMAL);
		log_msg("");
		
		
		setFontAttribute(font, 12, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.BOLD);
		log_msg(mappingConfig.getMcName());
		setFontAttribute(font, 12, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.NORMAL);
		
		log_msg("   MC Naming Standards",":   "+ mappingConfig.getValidationResults().get("MAPPING_CONFIG_NAME_VALIDATION"),TAB_SPLIT);
		log_msg("   Description Validation",":   "+ mappingConfig.getValidationResults().get("MAPPING_CONFIG_DESCRIPTION_VALIDATION"),TAB_SPLIT);
//		log_msg("   Environment",":   "+ mappingConfig.getValidationResults().get("MAPPING_CONFIG_RUNTIME_VALIDATION"),TAB_SPLIT);
		log_msg("   Verbose Validation",":   "+ mappingConfig.getValidationResults().get("MAPPING_CONFIG_TRACING_LEVEL_VALIDATION"),TAB_SPLIT);
		log_msg("   Backward Compatible Validation",":   " + mappingConfig.getValidationResults().get("MAPPING_CONFIG_BACKWARD_COMPATIBLE_VALIDATION"),TAB_SPLIT);
		log_msg("   Log Name Validation",":   " + mappingConfig.getValidationResults().get("MAPPING_CONFIG_LOG_FILE_VALIDATION"),TAB_SPLIT);
		log_msg("   Log Dir Validation" ,":   "+ mappingConfig.getValidationResults().get("MAPPING_CONFIG_LOG_FILE_DIR_VALIDATION"),TAB_SPLIT);
		log_msg("   Stop On Errors Validation",":   " + mappingConfig.getValidationResults().get("MAPPING_CONFIG_STOP_ON_ERROS_VALIDATION"),TAB_SPLIT);
		
		setFontAttribute(font, 12, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.BOLD);
		log_msg("Advance Session Properties");
		setFontAttribute(font, 10, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.NORMAL);
		Set<Object> properties=mappingConfig.getAdvanceSessionProperties().keySet();
		if(properties.size()>0) {
			for(Object prop:properties) {
				log_msg("   "+prop.toString().replace("SessionProperty.", ""),":   "+ mappingConfig.getAdvanceSessionProperties().get(prop),TAB_SPLIT);
			}
		}else {
			log_msg("   "+"N/A");
		}

		setFontAttribute(font, 12, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.BOLD);
		log_msg("Parameter Details");
		setFontAttribute(font, 12, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.NORMAL);
		if(!(mappingConfig.getValidationResults().get("MAPPING_CONFIG_PARAM_FILE").isEmpty() || mappingConfig.getValidationResults().get("MAPPING_CONFIG_PARAM_FILE")==null)) {
			log_msg("   Param File",":   "+ mappingConfig.getValidationResults().get("MAPPING_CONFIG_PARAM_FILE_VALIDATION"),TAB_SPLIT);
//			log_msg("   Param File Type",":   " + mappingConfig.getValidationResults().get("MAPPING_CONFIG_PARAM_FILE_TYPE_VALIDATION"),TAB_SPLIT);
			log_msg("   Param Dir validation",":   "+ mappingConfig.getValidationResults().get("MAPPING_CONFIG_PARAM_FILE_DIR_VALIDATION"),TAB_SPLIT);
		}else {
			log_msg("   Param File",":   "+ "N/A",TAB_SPLIT);
//			log_msg("   Param File Type",":   " + "N/A",TAB_SPLIT);
			log_msg("   Param Dir validation",":   "+ "N/A",TAB_SPLIT);
		}
		log_msg("\n");

	
		
		setFontAttribute(font, 12, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.BOLD);
		log_msg(mapping.getMappingName());
		setFontAttribute(font, 12, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.NORMAL);
		log_msg("   Mapping Naming Standards" ,":   "+ mapping.getValidationResults().get("MAPPING_NAME_VALIDATION"),TAB_SPLIT);
		log_msg("   Mapping Description Validation" ,":   "+ mapping.getValidationResults().get("MAPPING_DESCRIPTION_VALIDATION"),TAB_SPLIT);
		log_msg("   Is valid Mapping",":   "+ mapping.getValidationResults().get("MAPPING_IS_VALID"),TAB_SPLIT);
		log_msg("   Total Transformation count",":   "+ mapping.getValidationResults().get("MAPPING_TRANSFORMATION_COUNT_VALIDATION"),TAB_SPLIT);
		log_msg("   Transformation Names",":   "+ mapping.getValidationResults().get("MAPPING_TRANSFORMATION_LIST_VALIDATION"),TAB_SPLIT);
		log_msg("   Mapping Parameter count",":   "+ mapping.getValidationResults().get("MAPPING_PARAMETER_COUNT_VALIDATION"),TAB_SPLIT);
		if( Integer.parseInt(mapping.getValidationResults().get("MAPPING_PARAMETER_COUNT_VALIDATION")) > 0) {
			log_msg("   Mapping  Parameter List" ,":   "+ mapping.getValidationResults().get("MAPPING_PARAMETER_LIST_VALIDATION"),TAB_SPLIT);
		}else {
			log_msg("   Mapping  Parameter List" ,":   "+"N/A",TAB_SPLIT);
		}
		log_msg("   Has Fixed Connections",":   "+ mapping.getValidationResults().get("MAPPING_HAS_FIXED_CON_VALIDATION"),TAB_SPLIT);
		log_msg("   Total Mapping Task",":   "+ mapping.getValidationResults().get("MAPPING_TASK_COUNT_VALIDATION")+" task(s)",TAB_SPLIT);
		log_msg("\n");

		setFontAttribute(font, 12, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.BOLD);
		log_msg("Transformation Validation");
		setFontAttribute(font, 12, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.NORMAL);
		log_msg("");
		
		Transformation transformation[]=mcValidation.getTransformation();
		for(int i=0;i<transformation.length;i++) {
			if(transformation[i]!=null) {
				switch(transformation[i].getTransformationType()) {
					case "Source": 	
						Source src=(Source)transformation[i];
						log_msg("   Transformation Name" ,":   "+ src.getTransformationName(),TAB_SPLIT);
						log_msg("   Transformation Type" ,":   "+ src.getTransformationType(),TAB_SPLIT);
						log_msg("   Naming Starndard Validation" ,":   "+ src.getValidationResults().get("SOURCE_NAME_VALIDATION"),TAB_SPLIT);
						log_msg("   Tracing Level Validation" ,":   "+ src.getValidationResults().get("SOURCE_TRACING_LEVEL_VALIDATION"),TAB_SPLIT);
						log_msg("   Pre SQL Validation" ,":   "+ src.getValidationResults().get("SOURCE_PRE_SQL_VALIDATION"),TAB_SPLIT);
						log_msg("   Post SQL Validation" ,":   "+ src.getValidationResults().get("SOURCE_POST_SQL_VALIDATION"),TAB_SPLIT);
						log_msg("   SQL Override Query Validation" ,":   "+ src.getValidationResults().get("SOURCE_OVERRIDE_SQL_VALIDATION"),TAB_SPLIT);
						log_msg("   Source Filter Validation" ,":   "+ src.getValidationResults().get("SOURCE_FILTER_CONDITION_VALIDATION"),TAB_SPLIT);
						log_msg("   Source Sorter Validation" ,":   "+ src.getValidationResults().get("SOURCE_SORT_CONDITION_VALIDATION"),TAB_SPLIT);
						log_msg("   Source Distinct Validation" ,":   "+ src.getValidationResults().get("SOURCE_IS_DISTINCT_VALIDATION"),TAB_SPLIT);
					break;
					case "Expression":
						Expression exp=(Expression)transformation[i];
						log_msg("   Transformation Name" ,":   "+ exp.getTransformationName(),TAB_SPLIT);
						log_msg("   Transformation Type" ,":   "+ exp.getTransformationType(),TAB_SPLIT);
						log_msg("   Naming Starndard Validation" ,":   "+ exp.getValidationResults().get("EXPRESSION_NAME_VALIDATION"),TAB_SPLIT);
					break;
					
					case "Joiner":
						Joiner jnr=(Joiner)transformation[i];
						log_msg("   Transformation Name" ,":   "+ jnr.getTransformationName(),TAB_SPLIT);
						log_msg("   Transformation Type" ,":   "+ jnr.getTransformationType(),TAB_SPLIT);
						log_msg("   Naming Starndard Validation" ,":   "+ jnr.getValidationResults().get("JOINER_NAME_VALIDATION"),TAB_SPLIT);
						log_msg("   Tracing Level Validation" ,":   "+ jnr.getValidationResults().get("JOINER_TRACING_LEVEL_VALIDATION"),TAB_SPLIT);
						log_msg("   Cache Directory Validation" ,":   "+ jnr.getValidationResults().get("JOINER_CACHE_DIR_VALIDATION"),TAB_SPLIT);
						log_msg("   Data Cache Size" ,":   "+ jnr.getValidationResults().get("JOINER_DATA_CACHE_SIZE_VALIDATION"),TAB_SPLIT);
						log_msg("   Index Cache Size" ,":   "+ jnr.getValidationResults().get("JOINER_INDEX_CACHE_SIZE_VALIDATION"),TAB_SPLIT);
						log_msg("   is Sorted Inputs" ,":   "+ jnr.getValidationResults().get("JOINER_IS_SORTED_INPUTS_VALIDATION"),TAB_SPLIT);
						log_msg("   Join Type" ,":   "+ jnr.getValidationResults().get("JOINER_TYPE_VALIDATION"),TAB_SPLIT);
						log_msg("   Join Condition Validation" ,":   "+ jnr.getValidationResults().get("JOINER_CONDITION_VALIDATION"),TAB_SPLIT);
					break;
					
					
					
					case "Lookup":
						Lookup lkp=(Lookup)transformation[i];
						log_msg("   Transformation Name" ,":   "+ lkp.getTransformationName(),TAB_SPLIT);
						log_msg("   Transformation Type" ,":   "+ lkp.getTransformationType(),TAB_SPLIT);
						log_msg("   Naming Starndard Validation" ,":   "+ lkp.getValidationResults().get("LOOKUP_NAME_VALIDATION"),TAB_SPLIT);
						log_msg("   Tracing Level Validation" ,":   "+ lkp.getValidationResults().get("LOOKUP_TRACING_LEVEL_VALIDATION"),TAB_SPLIT);
						log_msg("   Cache Directory Validation" ,":   "+ lkp.getValidationResults().get("LOOKUP_CACHE_DIR_VALIDATION"),TAB_SPLIT);
						log_msg("   is Persistent Cache" ,":   "+ lkp.getValidationResults().get("LOOKUP_IS_PERSISTENT_CAHCE_VALIDATION"),TAB_SPLIT);
						log_msg("   is Dynamic Cache" ,":   "+ lkp.getValidationResults().get("LOOKUP_IS_DYNAMIC_CACHE_VALIDATION"),TAB_SPLIT);
						log_msg("   Data Cache Size" ,":   "+ lkp.getValidationResults().get("LOOKUP_DATA_CACHE_SIZE_VALIDATION"),TAB_SPLIT);
						log_msg("   Index Cache Size" ,":   "+ lkp.getValidationResults().get("LOOKUP_INDEX_CACHE_SIZE_VALIDATION"),TAB_SPLIT);
						log_msg("   is Sorted Inputs" ,":   "+ lkp.getValidationResults().get("LOOKUP_IS_SORTED_INPUT_VALIDATION"),TAB_SPLIT);
						log_msg("   Lookup Policy Match" ,":   "+ lkp.getValidationResults().get("LOOKUP_POLICY_ON_MULTIPLE_MATCH_VALIDATION"),TAB_SPLIT);
						log_msg("   Lookup Type" ,":   "+ lkp.getValidationResults().get("LOOKUP_TYPE_VALIDATION"),TAB_SPLIT);
						log_msg("   Lookup Condition Validation" ,":   "+ lkp.getValidationResults().get("LOOKUP_CONDITION_VALIDATION"),TAB_SPLIT);
						log_msg("   Lookup Filter Validation" ,":   "+ lkp.getValidationResults().get("LOOKUP_SOURCE_FILTER_CONDITION_VALIDATION"),TAB_SPLIT);
						log_msg("   Lookup Sort Validation" ,":   "+ lkp.getValidationResults().get("LOOKUP_SOURCE_SORT_CONDITION_VALIDATION"),TAB_SPLIT);
						log_msg("   Lookup Select Distinct Record" ,":   "+ lkp.getValidationResults().get("LOOKUP_SOURCE_DISTINCT_RECORD_VALIDATION"),TAB_SPLIT);
					break;
					
					
					case "Aggregator":
						Aggregator agg=(Aggregator)transformation[i];
						log_msg("   Transformation Name" ,":   "+ agg.getTransformationName(),TAB_SPLIT);
						log_msg("   Transformation Type" ,":   "+ agg.getTransformationType(),TAB_SPLIT);
						log_msg("   Naming Starndard Validation" ,":   "+ agg.getValidationResults().get("AGGREGATOR_NAME_VALIDATION"),TAB_SPLIT);
						log_msg("   Tracing Level Validation" ,":   "+ agg.getValidationResults().get("AGGREGATOR_TRACING_LEVEL_VALIDATION"),TAB_SPLIT);
						log_msg("   Cache Directory Validation" ,":   "+ agg.getValidationResults().get("AGGREGATOR_CACHE_DIR_VALIDATION"),TAB_SPLIT);
						log_msg("   Data Cache Size" ,":   "+ agg.getValidationResults().get("AGGREGATOR_DATA_CACHE_SIZE_VALIDATION"),TAB_SPLIT);
						log_msg("   Index Cache Size" ,":   "+ agg.getValidationResults().get("AGGREGATOR_INDEX_CACHE_SIZE_VALIDATION"),TAB_SPLIT);
						log_msg("   is Sorted Inputs" ,":   "+ agg.getValidationResults().get("AGGREGATOR_IS_SORTED_INPUT_VALIDATION"),TAB_SPLIT);
						log_msg("   Groupby Fields " ,":   "+ agg.getValidationResults().get("AGGREGATOR_GROUP_BY_FIELD_VALIDATION"),TAB_SPLIT);
						log_msg("   Agreegation Columns " ,":   "+ agg.getValidationResults().get("AGGREGATOR_FILELD_VALIDATION"),TAB_SPLIT);
					break;
					
					case "Sorter":
						Sorter srt=(Sorter)transformation[i];
						log_msg("   Transformation Name" ,":   "+ srt.getTransformationName(),TAB_SPLIT);
						log_msg("   Transformation Type" ,":   "+ srt.getTransformationType(),TAB_SPLIT);
						log_msg("   Naming Starndard Validation" ,":   "+ srt.getValidationResults().get("SORTER_NAME_VALIDATION"),TAB_SPLIT);
						log_msg("   Tracing Level Validation" ,":   "+ srt.getValidationResults().get("SORTER_TRACING_LEVEL_VALIDATION"),TAB_SPLIT);
						log_msg("   Cache Directory Validation" ,":   "+ srt.getValidationResults().get("SORTER_CACHE_DIR_VALIDATION"),TAB_SPLIT);
						log_msg("   Cache Size" ,":   "+ srt.getValidationResults().get("SORTER_CACHE_SIZE_VALIDATION"),TAB_SPLIT);
						log_msg("   is Distinct" ,":   "+ srt.getValidationResults().get("SORTER_IS_DISTINCT_INPUT_VALIDATION"),TAB_SPLIT);
						log_msg("   Sorter Mode " ,":   "+ srt.getValidationResults().get("SORTER_MODE_VALIDATION"),TAB_SPLIT);
						log_msg("   Sorter Condition Validation" ,":   "+ srt.getValidationResults().get("SORTER_CONDITION_VALIDATION"),TAB_SPLIT);
					break;
					
					case "Router":
						Router rtr=(Router)transformation[i];
						log_msg("   Transformation Name" ,":   "+ rtr.getTransformationName(),TAB_SPLIT);
						log_msg("   Transformation Type" ,":   "+ rtr.getTransformationType(),TAB_SPLIT);
						log_msg("   Naming Starndard Validation" ,":   "+ rtr.getValidationResults().get("ROUTER_NAME_VALIDATION"),TAB_SPLIT);
						log_msg("   Tracing Level Validation" ,":   "+ rtr.getValidationResults().get("ROUTER_TRACING_LEVEL_VALIDATION"),TAB_SPLIT);
						log_msg("   Router Output Groups Count" ,":   "+ rtr.getValidationResults().get("ROUTER_CATEGORY_VALIDATION"),TAB_SPLIT);
					break;
					
					case "Target":
						Target tgt=(Target)transformation[i];
						log_msg("   Transformation Name" ,":   "+ tgt.getTransformationName(),TAB_SPLIT);
						log_msg("   Transformation Type" ,":   "+ tgt.getTransformationType(),TAB_SPLIT);
						log_msg("   Naming Starndard Validation" ,":   "+ tgt.getValidationResults().get("TARGET_NAME_VALIDATION"),TAB_SPLIT);
						log_msg("   Transformation Type" ,":   "+ tgt.getValidationResults().get("TARGET_TYPE_VALIDATION"),TAB_SPLIT);
						log_msg("   Target Object Type" ,":   "+ tgt.getValidationResults().get("TARGET_OBJ_TYPE_VALIDATION"),TAB_SPLIT);
						log_msg("   Pre SQL Validation" ,":   "+ tgt.getValidationResults().get("TARGET_PRE_SQL_VALIDATION"),TAB_SPLIT);
						log_msg("   Post SQL Validation" ,":   "+ tgt.getValidationResults().get("TARGET_POST_SQL_VALIDATION"),TAB_SPLIT);
						log_msg("   Target Update verride Validation" ,":   "+ tgt.getValidationResults().get("TARGET_OVERRIDE_QUERY_VALIDATION"),TAB_SPLIT);
						log_msg("   Target Create at Runtime" ,":   "+ tgt.getValidationResults().get("TARGET_IS_DYMAIC_TARGET_VALIDATION"),TAB_SPLIT);
						log_msg("   Target Field Mapping Mode" ,":   "+ tgt.getValidationResults().get("TARGET_FIELD_MODE_VALIDATION"),TAB_SPLIT);
						log_msg("   Target Input Sorted Validation" ,":   "+ tgt.getValidationResults().get("TARGET_IS_SORTED_INPUT_VALIDATION"),TAB_SPLIT);
						log_msg("   Target Custom Query Validation" ,":   "+ tgt.getValidationResults().get("TARGET_CUSTOM_QUERY_VALIDATION"),TAB_SPLIT);
					break;
				
				}
				log_msg("");
			}
		}
		
		
		setFontAttribute(font, 14, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.BOLD);
		log_msg("Test Case Summary");
		log_msg("-----------------");
		setFontAttribute(font, 12, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.NORMAL);
		log_msg("   Total Test Case Executed",":   "+ mcValidation.getTOTAL_TEST_CASE_COUNT(),TAB_SPLIT);
		log_msg("   Pass Count",":   "+ mcValidation.getPASS_CASE_COUNT(),TAB_SPLIT);
		log_msg("   Fail Count",":   "+ mcValidation.getFAIL_CASE_COUNT(),TAB_SPLIT);
		log_msg("   Warning Count",":   "+ mcValidation.getWARNING_CASE_COUNT(),TAB_SPLIT);
	
		log_msg("");
		setFontAttribute(font, 14, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.BOLD);
		log_msg("Please find the review comments below");
		log_msg("-------------------------------------");
		setFontAttribute(font, 12, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.NORMAL);
		
		if(validationList.isEmpty()) {
			log_msg("Data Integration Infa components are created as per the ICC Standards..");
		}else
		{
			Set<Object> keys=validationList.keySet();
			for(Object key:keys) {
				log_msg("   • "+validationList.get(key));
			}
		}
		
		closeDocument();
	}
	
	public void log_msg(String str) {
		System.out.println(str);
		paragraph.add(str + "\n");
		try {
			pdfDoc.add(paragraph);
			paragraph.clear();
		}catch(Exception e) {
			System.out.println(e.getMessage());
		}
	}
	
	public void log_msg(String value1,String value2, float splitvalue) {
		System.out.println(value1 + "" + value2);
		paragraph=paragraphTabFormating(value1,value2,splitvalue);
		try {
			pdfDoc.add(paragraph);
			paragraph.clear();
		}catch(Exception e) {
			System.out.println(e.getMessage());
		}
	}
	
	private Paragraph paragraphTabFormating(String value1, String value2,float splitvalue) {
		paragraph.add(value1);
		paragraph.setTabSettings(new TabSettings(splitvalue));
	    paragraph.add(Chunk.TABBING);
	    if(value2.equalsIgnoreCase("PASS")) {
	    	font.setColor(BaseColor.GREEN);
	    }else if(value2.equalsIgnoreCase("FAIL")) {
	    	font.setColor(BaseColor.RED);
	    }if(value2.equalsIgnoreCase("WARNING")) {
	    	font.setColor(BaseColor.ORANGE);
	    }
	    
	    paragraph.setFont(font);
	    paragraph.add(value2);
	    font.setColor(BaseColor.BLACK);
	    paragraph.setFont(font);
	    return paragraph;
	}
	
	public void openDocument() {
		pdfDoc.open();
	}
	
	public void closeDocument() {
		pdfDoc.close();
	}
	
	
	private void setFontAttribute(Font font, int fontSize, BaseColor color, Paragraph paragraph, int alignment, int fontStyle) {
		font.setSize(fontSize); 
		font.setColor(color); 
		font.setStyle(fontStyle);
		paragraph.setFont(font);
		paragraph.setAlignment(alignment);
	}

}
