package com.wow.dev.model;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.Calendar;
import java.util.Map;
import java.util.Set;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.TabSettings;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfWriter;
import com.wow.dev.controller.IICSMIValidation;

public class MIPDFResult {
	
	private Document pdfDoc;
	private Paragraph paragraph;
	private Font font; 
	private PdfWriter pdfWriter;
	
	public MIPDFResult() {
		try {
			paragraph=new Paragraph();
			font = new Font();
			font.setFamily(BaseFont.COURIER);
			font.setSize(10);
			paragraph.setFont(font);
			paragraph.setSpacingAfter(4f);
			Rectangle pagesize = new Rectangle(714, 864);
			pdfDoc= new Document(pagesize);
		}catch(Exception e) {log_msg(e.getMessage());}
	}
	
	
	public void generateOutput(IICSMIValidation miValidation,Map<Object, Object> validationList,String peerReviewerName) {
		try {
				pdfWriter=PdfWriter.getInstance(pdfDoc, new FileOutputStream(miValidation.getMi().getMassIngestionName()+".pdf"));
				openDocument();
		} catch (FileNotFoundException e) {
			System.out.println("The process cannot access the file because it is being used by another process"+ miValidation.getMi().getMassIngestionName()+".pdf. Please close the file before running the process.");
			System.exit(-1);
		} catch (DocumentException e) {
			e.printStackTrace();
		}
		
		try {
			Image logo = Image.getInstance("res/logo.jpg");
			logo.scalePercent(45f);
			pdfDoc.add(logo);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		float TAB_SPLIT=250;
		log_msg("");
		
		setFontAttribute(font, 18, BaseColor.BLACK, paragraph, Element.ALIGN_CENTER, Font.BOLD);
		log_msg("-------------------------------------------------");
		log_msg("IICS MI Code Review – ICC Standards check Report");
		log_msg("-------------------------------------------------");
		setFontAttribute(font, 12, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.NORMAL);
		
		log_msg("\n");
		log_msg("Mass Ingestion Name",":   "+miValidation.getMi().getMassIngestionName(),TAB_SPLIT);
		log_msg("Mass Ingestion ID",":   "+miValidation.getMi().getMassIngestionID(),TAB_SPLIT);
		log_msg("IICS Folder Name",":   "+miValidation.getMi().getFolderName(),TAB_SPLIT);
		log_msg("Generated By",":   "+peerReviewerName,TAB_SPLIT);
		log_msg("Generated On",":   "+Calendar.getInstance().getTime().toString(),TAB_SPLIT);
		String environment=null;
		if(miValidation.getMi().getAgentGroupID().contains("001L4D25000000000003")) environment="DVLP";
		else if(miValidation.getMi().getAgentGroupID().contains("001L4F0B0000000000B1")) environment="TEST";
		else if(miValidation.getMi().getAgentGroupID().contains("001M2C0B00000000009E")) environment="ACPT";
		else if(miValidation.getMi().getAgentGroupID().contains("000S3Z0B0000000000AB")) environment="PROD";
		else environment="DEFAULT";
		log_msg("Environment",":   "+environment,TAB_SPLIT);
		
		log_msg("\n");
		setFontAttribute(font, 14, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.BOLD);
		log_msg("Code Compliance Checklist and Status");
		log_msg("------------------------------------");
		setFontAttribute(font, 12, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.NORMAL);
		
		setFontAttribute(font, 14, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.BOLD);
		log_msg("");
		log_msg(miValidation.getMi().getMassIngestionName());
		log_msg("");
		setFontAttribute(font, 12, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.NORMAL);
		
		log_msg("   MI Naming Standards" , ":   "+miValidation.getValidationResults().get("MI_NAME_VALIDATION"),TAB_SPLIT);
		log_msg("   MI Description Check" , ":   "+miValidation.getValidationResults().get("MI_DESCRIPTION_VALIDATION"),TAB_SPLIT);
		log_msg("   MI Tracing Level Check" , ":   "+miValidation.getValidationResults().get("MI_TRACING_VALIDATION"),TAB_SPLIT);
		log_msg("   MI Source Pattern Validation" , ":   "+miValidation.getValidationResults().get("MI_SRC_PTRN_VALIDATION"),TAB_SPLIT);
		log_msg("   MI Source Directory Validation" , ":   "+miValidation.getValidationResults().get("MI_SRC_DIR_VALIDATION"),TAB_SPLIT);
		log_msg("   MI Target Directory Validation" , ":   "+miValidation.getValidationResults().get("MI_TGT_DIR_VALIDATION"),TAB_SPLIT);
		log_msg("   MI Flow" , ":   "+miValidation.getMi().getSource().getSourceType()+" to "+miValidation.getMi().getTarget().getTargetType(),TAB_SPLIT);
		
		setFontAttribute(font, 14, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.BOLD);
		log_msg("");
		log_msg("Source: "+ miValidation.getMi().getSource().getSourceType());
		setFontAttribute(font, 12, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.NORMAL);
		
		log_msg("   Src Connection Name" , ":   "+miValidation.getMi().getSource().getSourceConnectionName(),TAB_SPLIT);
		log_msg("   Src File Pattern Type" , ":   "+miValidation.getMi().getSource().getFilePatternType(),TAB_SPLIT);
		log_msg("   Src File Pattern" , ":   "+miValidation.getMi().getSource().getSourceFilePattern(),TAB_SPLIT);
		log_msg("   Src File Directory" , ":   "+miValidation.getMi().getSource().getSourceDirectory(),TAB_SPLIT);
		log_msg("   Include Sub Folder" , ":   "+miValidation.getMi().getSource().getIncludeSubfolder(),TAB_SPLIT);
		log_msg("   Check Duplicate" , ":   "+miValidation.getMi().getSource().getCheckDuplicate(),TAB_SPLIT);
		log_msg("   Batch Size" , ":   "+miValidation.getMi().getSource().getBatchSize(),TAB_SPLIT);
		log_msg("   Post Pickup Option" , ":   "+miValidation.getMi().getSource().getPostPickupAction(),TAB_SPLIT);
		
		
		setFontAttribute(font, 14, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.BOLD);
		log_msg("");
		log_msg("Target: "+ miValidation.getMi().getTarget().getTargetType());
		setFontAttribute(font, 12, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.NORMAL);
		
		log_msg("   Tgt Connection Name" , ":   "+miValidation.getMi().getTarget().getTargetConnectionName(),TAB_SPLIT);
		log_msg("   Tgt File Directory" , ":   "+miValidation.getMi().getTarget().getTargetDirectory(),TAB_SPLIT);
//		log_msg("   File Exist Option" , ":   "+miValidation.getMi().getTarget().getFileExistsAction(),TAB_SPLIT);
//		log_msg("   Compression Type" , ":   "+miValidation.getMi().getTarget().getCompressionType(),TAB_SPLIT);
		
		log_msg("\n");
		log_msg("Post Transfer Action" , ":   "+miValidation.getMi().getPostTaskActions(),TAB_SPLIT);
		log_msg("\n");
		
		setFontAttribute(font, 14, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.BOLD);
		log_msg("Test Case Summary");
		log_msg("-----------------");
		setFontAttribute(font, 12, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.NORMAL);
		log_msg("   Total Test Case Executed",":   "+ miValidation.getTOTAL_TEST_CASE_COUNT(),TAB_SPLIT);
		log_msg("   Pass Count",":   "+ miValidation.getPASS_CASE_COUNT(),TAB_SPLIT);
		log_msg("   Fail Count",":   "+ miValidation.getFAIL_CASE_COUNT(),TAB_SPLIT);
		log_msg("   Warning Count",":   "+ miValidation.getWARNING_CASE_COUNT(),TAB_SPLIT);
		log_msg("\n");

		
		setFontAttribute(font, 14, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.BOLD);
		log_msg("Please find the review comments below");
		log_msg("-------------------------------------");
		setFontAttribute(font, 12, BaseColor.BLACK, paragraph, Element.ALIGN_LEFT, Font.NORMAL);
		
		if(validationList.isEmpty()) {
			log_msg("Mass Ingestion components are created as per the ICC Standards..");
		}else
		{
			Set<Object> keys=validationList.keySet();
			for(Object key:keys) {
				log_msg("   • "+validationList.get(key));
			}
		}
		
		closeDocument();
	}
	
	public void log_msg(String str) {
		System.out.println(str);
		paragraph.add(str + "\n");
		try {
			pdfDoc.add(paragraph);
			paragraph.clear();
		}catch(Exception e) {
			System.out.println(e.getMessage());
		}
	}
	
	public void log_msg(String value1,String value2, float splitvalue) {
		System.out.println(value1 + "" + value2);
		paragraph=paragraphTabFormating(value1,value2,splitvalue);
		try {
			pdfDoc.add(paragraph);
			paragraph.clear();
		}catch(Exception e) {
			System.out.println(e.getMessage());
		}
	}
	
	private Paragraph paragraphTabFormating(String value1, String value2,float splitvalue) {
		paragraph.add(value1);
		paragraph.setTabSettings(new TabSettings(splitvalue));
	    paragraph.add(Chunk.TABBING);
	    paragraph.add(value2);
	    return paragraph;
	}
	
	public void openDocument() {
		pdfDoc.open();
	}
	
	public void closeDocument() {
		pdfDoc.close();
	}
	
	
	private void setFontAttribute(Font font, int fontSize, BaseColor color, Paragraph paragraph, int alignment, int fontStyle) {
		font.setSize(fontSize); 
		font.setColor(color); 
		font.setStyle(fontStyle);
		paragraph.setFont(font);
		paragraph.setAlignment(alignment);
	}

}
